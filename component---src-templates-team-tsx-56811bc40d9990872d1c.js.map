{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/atoms/team-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/lib/size.ts","webpack://ore-ore-gatsbyjs-template/./src/templates/team.tsx"],"names":["TeamIcon","teamName","size","className","props","files","useStaticQuery","image","React","svg","svgs","nodes","find","node","name","images","defaultImage","Error","nonNullImage","to","file","alt","width","SIZE","height","xxs","xs","sm","md","lg","xl","data","team","site","nameJa","siteMetadata","title"],"mappings":"iOAaaA,EAAoC,SAAC,GAK5C,IAJJC,EAII,EAJJA,SACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,UACGC,GACC,0CACEC,GAAQC,QAAc,aA4CtBC,EAAQC,WAAc,WAC1B,IAAMC,EAAMJ,EAAMK,KAAKC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASb,KAC1D,GAAIQ,EAAK,OAAOA,EAChB,IAAMF,EAAQF,EAAMU,OAAOJ,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASb,KAC9D,GAAIM,EAAO,OAAOA,EAAML,GACxB,IAAMc,EAAeX,EAAMU,OAAOJ,MAAMC,MACtC,SAACC,GAAD,MAAwB,YAAdA,EAAKC,QAEjB,GAAIE,EAAc,OAAOA,EAAad,GACtC,MAAMe,MAAM,6BACX,CAAChB,EAAUI,EAAOH,IAEfgB,EAAeV,WAAc,WACjC,GAAID,EAAO,OAAOA,EAClB,MAAMU,MAAM,YAAYV,KACvB,CAACA,IAEJ,OACE,gBAAC,KAAD,CAAMY,GAAE,SAAWlB,EAAYE,UAAWA,GACxC,gBAAC,IAAD,iBACMC,EADN,CAEEgB,KAAMF,EACNG,IAAQpB,EAAL,QACHqB,MAAOC,IAAKrB,GACZsB,OAAQD,IAAKrB,S,kECvFd,IAAMqB,EAAO,CAClBE,IAAK,GACLC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,M,qFCwDN,UAtCqB,SAAC,GAEgB,UADpCC,KAAQC,EAC4B,EAD5BA,KAAMC,EACsB,EADtBA,KAEd,IAAKD,EACH,MAAMf,MAAM,oBAEd,OACE,2BACE,gBAAC,IAAD,KACE,6BAAWe,EAAKE,OAAhB,aAAkCD,SAAlC,UAAkCA,EAAME,oBAAxC,aAAkC,EAAoBC,SAExD,2BACE,gBAAC,KAAD,CAAMjB,GAAG,SAAT,YAGF,2BACE,gBAAC,IAAD,CAAUhB,UAAU,eAAeF,SAAU+B,EAAKlB,KAAMZ,KAAK,QAkB/D,2BAAM8B,EAAKE","file":"component---src-templates-team-tsx-56811bc40d9990872d1c.js","sourcesContent":["import { TeamName } from '@/data/team'\nimport { SIZE, SIZE_TYPE } from '@/lib/size'\nimport type { TeamIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype TeamIconProps = {\n  teamName: TeamName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const TeamIcon: React.FC<TeamIconProps> = ({\n  teamName,\n  size,\n  className,\n  ...props\n}) => {\n  const files = useStaticQuery<TeamIconQuery>(graphql`\n    query TeamIcon {\n      svgs: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { in: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          publicURL\n        }\n      }\n      images: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { nin: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n\n  const image = React.useMemo(() => {\n    const svg = files.svgs.nodes.find((node) => node.name === teamName)\n    if (svg) return svg\n    const image = files.images.nodes.find((node) => node.name === teamName)\n    if (image) return image[size]\n    const defaultImage = files.images.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage[size]\n    throw Error('Default Image not found')\n  }, [teamName, files, size])\n\n  const nonNullImage = React.useMemo(() => {\n    if (image) return image\n    throw Error(`image is ${image}`)\n  }, [image])\n\n  return (\n    <Link to={`/team/${teamName}`} className={className}>\n      <ImageWrapper\n        {...props}\n        file={nonNullImage}\n        alt={`${teamName}のアイコン`}\n        width={SIZE[size]}\n        height={SIZE[size]}\n      />\n    </Link>\n  )\n}\n","export const SIZE = {\n  xxs: 16,\n  xs: 24,\n  sm: 32,\n  md: 48,\n  lg: 64,\n  xl: 128,\n} as const\n\nexport type SIZE_TYPE = keyof typeof SIZE\n","import { TeamIcon } from '@/components/atoms/team-icon'\nimport { TeamTemplateQuery } from '@gql'\nimport { graphql, Link } from 'gatsby'\nimport * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport const query = graphql`\n  query TeamTemplate($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    team(id: { eq: $slug }) {\n      name\n      nameJa\n    }\n  }\n`\n\ntype TeamTemplateProps = {\n  data: TeamTemplateQuery\n}\n\nconst TeamTemplate = ({\n  data: { team, site },\n}: TeamTemplateProps): JSX.Element => {\n  if (!team) {\n    throw Error('Member not found')\n  }\n  return (\n    <div>\n      <Helmet>\n        <title>{`${team.nameJa} | チーム | ${site?.siteMetadata?.title}`}</title>\n      </Helmet>\n      <div>\n        <Link to=\"/team\">▷ チーム一覧</Link>\n      </div>\n\n      <div>\n        <TeamIcon className=\"rounded-full\" teamName={team.name} size=\"xl\" />\n      </div>\n\n      {/* <div>\n        {member.social?.twitter ? (\n          <div>\n            <TwitterIcon size=\"xs\" className=\"inline\" />\n            <TwitterLink username={member.social.twitter} />\n          </div>\n        ) : null}\n        {member.social?.github ? (\n          <div>\n            <GithubIcon size=\"xs\" className=\"inline\" />\n            <GithubLink username={member.social.github} />\n          </div>\n        ) : null}\n      </div> */}\n\n      <div>{team.nameJa}</div>\n    </div>\n  )\n}\nexport default TeamTemplate\n"],"sourceRoot":""}