{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/atoms/image-wrapper.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/member-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/page-header.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/team-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/molecules/MemberCard.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/organisms/Tab.tsx","webpack://ore-ore-gatsbyjs-template/./src/pages/members.tsx"],"names":["ImageWrapper","props","publicURL","propsIsGastbyProps","G","src","MemberIcon","memberName","size","files","useStaticQuery","fixedImage","React","membersOne","allFile","nodes","find","node","name","defaultImage","Error","image","to","gatsbyImageData","alt","PageHeader","pageName","images","childImageSharp","TeamIcon","teamName","teamsOne","MemberCard","member","className","nameJa","teams","map","team","key","id","Tab","tabs","items","children","selectedTab","setSelectedTab","tab","onClick","style","minHeight","item","i","data","Helmet","site","siteMetadata","title","現役","activeMemvers","OB","graduatedMembers"],"mappings":"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","file":"component---src-pages-members-tsx-706213216f6fcb95928e.js","sourcesContent":["import { GatsbyImage, GatsbyImageProps } from 'gatsby-plugin-image'\nimport * as React from 'react'\n\ntype ImageWrapperProps =\n  | (Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> & {\n      publicURL: string\n    })\n  | (GatsbyImageProps & { publicURL?: never })\n\nconst propsIsGastbyProps = (\n  props: ImageWrapperProps\n): props is GatsbyImageProps & { publicURL?: never } => {\n  return typeof props.publicURL !== 'string'\n}\n\nexport const ImageWrapper = (props: ImageWrapperProps): JSX.Element => {\n  if (propsIsGastbyProps(props)) {\n    return <GatsbyImage {...props} />\n  }\n  return <img {...props} src={props.publicURL} />\n}\n","import { MemberName } from '@/data/member'\nimport { SIZE_TYPE } from '@/lib/size'\nimport type { MemberIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype MemberIconProps = {\n  memberName: MemberName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const MemberIcon: React.FC<MemberIconProps> = ({\n  memberName,\n  size,\n  ...props\n}) => {\n  const files = useStaticQuery<MemberIconQuery>(graphql`\n    query MemberIcon {\n      allFile(filter: { relativeDirectory: { eq: \"member-images\" } }) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n  const fixedImage = React.useMemo(() => {\n    const membersOne = files.allFile.nodes.find(\n      (node) => node.name === memberName\n    )\n    if (membersOne) return membersOne\n    const defaultImage = files.allFile.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage\n    throw Error('Default Image not found')\n  }, [memberName, files])\n  const image = React.useMemo(() => {\n    const image = fixedImage[size]\n    if (!image) throw Error(\"Image can't resolved\")\n    return image\n  }, [fixedImage, size])\n\n  return (\n    <Link to={`/members/${memberName}`}>\n      <ImageWrapper\n        {...props}\n        image={image.gatsbyImageData}\n        alt={`${memberName}のアイコン`}\n      />\n    </Link>\n  )\n}\n","import type { PageHeaderQuery } from '@gql'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype PageHeaderProps = {\n  pageName: 'members'\n  className?: string\n}\n\nexport const PageHeader = ({\n  pageName,\n  ...props\n}: PageHeaderProps): JSX.Element => {\n  const images = useStaticQuery<PageHeaderQuery>(graphql`\n    query PageHeader {\n      allFile(filter: { relativeDirectory: { eq: \"site\" } }) {\n        nodes {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n          name\n        }\n      }\n    }\n  `)\n\n  const image = React.useMemo(() => {\n    const image = images.allFile.nodes.find(\n      (node) => node.name === `${pageName}-header`\n    )\n    if (image?.childImageSharp) {\n      return image.childImageSharp\n    }\n    throw Error(`Image site/${pageName}-header.{png,jpeg...} not found!`)\n  }, [images, pageName])\n\n  return <ImageWrapper {...props} image={image.gatsbyImageData} alt=\"\" />\n}\n","import { TeamName } from '@/data/team'\nimport { SIZE_TYPE } from '@/lib/size'\nimport type { TeamIconQuery } from '@gql'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype TeamIconProps = {\n  teamName: TeamName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const TeamIcon: React.FC<TeamIconProps> = ({\n  teamName,\n  size,\n  ...props\n}) => {\n  const files = useStaticQuery<TeamIconQuery>(graphql`\n    query TeamIcon {\n      allFile(filter: { relativeDirectory: { eq: \"team-images\" } }) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n\n  const fixedImage = React.useMemo(() => {\n    const teamsOne = files.allFile.nodes.find((node) => node.name === teamName)\n    if (teamsOne) return teamsOne\n    const defaultImage = files.allFile.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage\n    throw Error('Default Image not found')\n  }, [teamName, files])\n  const image = React.useMemo(() => {\n    const image = fixedImage[size]\n    if (!image) throw Error(\"Image can't resolved\")\n    return image\n  }, [fixedImage, size])\n\n  return (\n    <ImageWrapper\n      {...props}\n      image={image.gatsbyImageData}\n      alt={`${teamName}のアイコン`}\n    />\n  )\n}\n","import { MemberName } from '@/data/member'\nimport { TeamName } from '@/data/team'\nimport { MemberInfoFragment } from '@gql'\nimport { Link } from 'gatsby'\nimport * as React from 'react'\nimport { MemberIcon } from '../atoms/member-icon'\nimport { TeamIcon } from '../atoms/team-icon'\n\ntype MemberCardProps = {\n  member: MemberInfoFragment\n}\n\nexport const MemberCard = ({ member }: MemberCardProps): JSX.Element => {\n  return (\n    <div className=\"flex\">\n      <div className=\"flex justify-center items-center p-3\">\n        <MemberIcon\n          className=\"rounded-full\"\n          memberName={member.name as MemberName}\n          size=\"lg\"\n        />\n      </div>\n      <div className=\"flex flex-col p-3 pl-4\">\n        <div className=\"text-lg\">\n          <Link to={`/members/${member.name}`}>{member.nameJa} ▷</Link>\n        </div>\n        <div>\n          {member.teams\n            ? member.teams.map((team) => (\n                <TeamIcon\n                  className=\"mr-3\"\n                  key={team.id}\n                  teamName={team.team.name as TeamName}\n                  size=\"sm\"\n                />\n              ))\n            : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\n\ntype TabProps<T extends string, V extends Record<string, unknown>> = {\n  tabs: [T, ...T[]]\n  items: {\n    [key in T]: V[]\n  }\n  children: (item: V, idx: number) => JSX.Element\n}\n\nexport const Tab = <T extends string, V extends Record<string, unknown>>({\n  tabs,\n  items,\n  children,\n}: TabProps<T, V>): JSX.Element => {\n  const [selectedTab, setSelectedTab] = React.useState<T>(tabs[0])\n\n  return (\n    <>\n      <div className=\"flex flex-row\">\n        {tabs.map((tab) => (\n          <button\n            key={tab}\n            className={`flex-grow-0 px-8 py-2 text-lg border rounded-t focus:outline-none hover:bg-accent ${\n              tab === selectedTab ? 'border-b-0' : ''\n            }`}\n            onClick={() => setSelectedTab(tab)}>\n            {tab}\n          </button>\n        ))}\n        <div className=\"flex-grow border-b\" />\n      </div>\n      <div className=\"border border-t-0 rounded-b\" style={{ minHeight: 100 }}>\n        {tabs.map((tab) => (\n          <div\n            key={tab}\n            className={`divide-y-2 ${tab !== selectedTab ? 'hidden' : ''}`}>\n            {items[tab].map((item, i) => children(item, i))}\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n","import { PageHeader } from '@/components/atoms/page-header'\nimport { MemberCard } from '@/components/molecules/MemberCard'\nimport { Tab } from '@/components/organisms/Tab'\nimport type { MembersPageQuery } from '@gql'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\nimport * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport const pageQuery = graphql`\n  query MembersPage {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    activeMemvers: allMember(filter: { isGraduated: { ne: true } }) {\n      nodes {\n        ...memberInfo\n      }\n    }\n    graduatedMembers: allMember(filter: { isGraduated: { eq: true } }) {\n      nodes {\n        ...memberInfo\n      }\n    }\n  }\n\n  fragment memberInfo on Member {\n    name\n    position\n    nameJa\n    id\n    joinedAt\n    belongs {\n      faculty {\n        name\n        nameJa\n        id\n      }\n      grade\n    }\n    skills {\n      level\n      skill {\n        name\n        id\n      }\n      id\n    }\n    teams {\n      id\n      team {\n        name\n        id\n      }\n      leader\n    }\n  }\n`\n\ninterface MembersPageProps {\n  data: MembersPageQuery\n}\n\nconst MembersPage = ({ data }: MembersPageProps): JSX.Element => {\n  return (\n    <div>\n      <Helmet>\n        <title>{`メンバー | ${data.site?.siteMetadata?.title}`}</title>\n      </Helmet>\n      <PageHeader pageName=\"members\" />\n      <div className=\"flex flex-col my-5 mx-5\">\n        <h1 className=\"text-center text-3xl\">メンバー一覧</h1>\n        <p className=\"text-base px-8 md:px-16 lg:px-32\">\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur\n          quod eveniet repellendus delectus doloribus excepturi recusandae,\n          provident porro modi adipisci facilis reiciendis accusamus tempore,\n          quisquam cumque magni ea. Aliquam, debitis.\n        </p>\n      </div>\n\n      <div className=\"container px-4 mx-auto\">\n        <Tab\n          tabs={['現役', 'OB']}\n          items={{\n            現役: data.activeMemvers.nodes,\n            OB: data.graduatedMembers.nodes,\n          }}>\n          {(member) => <MemberCard member={member} key={member.id} />}\n        </Tab>\n\n        <Link to=\"/\">Go to Top</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default MembersPage\n"],"sourceRoot":""}