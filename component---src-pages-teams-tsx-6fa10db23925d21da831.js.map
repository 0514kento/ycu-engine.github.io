{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/atoms/member-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/team-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/lib/size.ts","webpack://ore-ore-gatsbyjs-template/./src/pages/teams.tsx"],"names":["MemberIcon","memberName","size","props","files","useStaticQuery","fixedImage","React","membersOne","allFile","nodes","find","node","name","defaultImage","Error","image","to","file","alt","width","SIZE","height","TeamIcon","teamName","className","svg","svgs","images","nonNullImage","xxs","xs","sm","md","lg","xl","data","site","siteMetadata","title","allTeam","map","team","key","id","nameJa","members","teamMember","member"],"mappings":"iOAaaA,EAAwC,SAAC,GAIhD,IAHJC,EAGI,EAHJA,WACAC,EAEI,EAFJA,KACGC,GACC,gCACEC,GAAQC,QAAc,cA2BtBC,EAAaC,WAAc,WAC/B,IAAMC,EAAaJ,EAAMK,QAAQC,MAAMC,MACrC,SAACC,GAAD,OAAUA,EAAKC,OAASZ,KAE1B,GAAIO,EAAY,OAAOA,EACvB,IAAMM,EAAeV,EAAMK,QAAQC,MAAMC,MACvC,SAACC,GAAD,MAAwB,YAAdA,EAAKC,QAEjB,GAAIC,EAAc,OAAOA,EACzB,MAAMC,MAAM,6BACX,CAACd,EAAYG,IACVY,EAAQT,WAAc,WAC1B,IAAMS,EAAQV,EAAWJ,GACzB,IAAKc,EAAO,MAAMD,MAAM,wBACxB,OAAOC,IACN,CAACV,EAAYJ,IAEhB,OACE,gBAAC,KAAD,CAAMe,GAAE,YAAchB,GACpB,gBAAC,IAAD,iBACME,EADN,CAEEe,KAAMF,EACNG,IAAQlB,EAAL,QACHmB,MAAOC,IAAKnB,GACZoB,OAAQD,IAAKnB,S,wHCxDRqB,EAAoC,SAAC,GAK5C,IAJJC,EAII,EAJJA,SACAtB,EAGI,EAHJA,KACAuB,EAEI,EAFJA,UACGtB,GACC,0CACEC,GAAQC,QAAc,aA4CtBW,EAAQT,WAAc,WAC1B,IAAMmB,EAAMtB,EAAMuB,KAAKjB,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASW,KAC1D,GAAIE,EAAK,OAAOA,EAChB,IAAMV,EAAQZ,EAAMwB,OAAOlB,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASW,KAC9D,GAAIR,EAAO,OAAOA,EAAMd,GACxB,IAAMY,EAAeV,EAAMwB,OAAOlB,MAAMC,MACtC,SAACC,GAAD,MAAwB,YAAdA,EAAKC,QAEjB,GAAIC,EAAc,OAAOA,EAAaZ,GACtC,MAAMa,MAAM,6BACX,CAACS,EAAUpB,EAAOF,IAEf2B,EAAetB,WAAc,WACjC,GAAIS,EAAO,OAAOA,EAClB,MAAMD,MAAM,YAAYC,KACvB,CAACA,IAEJ,OACE,gBAAC,KAAD,CAAMC,GAAE,UAAYO,EAAYC,UAAWA,GACzC,gBAAC,IAAD,iBACMtB,EADN,CAEEe,KAAMW,EACNV,IAAQK,EAAL,QACHJ,MAAOC,IAAKnB,GACZoB,OAAQD,IAAKnB,S,kECvFd,IAAMmB,EAAO,CAClBS,IAAK,GACLC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,M,8FC+DN,UAjCkB,SAAC,GAA0C,QAAxCC,EAAwC,EAAxCA,KACnB,OACE,2BACE,gBAAC,IAAD,KACE,iDAAiBA,EAAKC,YAAtB,iBAAiB,EAAWC,oBAA5B,aAAiB,EAAyBC,SAE5C,mCACA,0BACGH,EAAKI,QAAQ9B,MAAM+B,KAAI,SAACC,GAAD,OACtB,sBAAIC,IAAKD,EAAKE,IACZ,gBAAC,IAAD,CAAUpB,SAAUkB,EAAK7B,KAAMX,KAAK,OACnCwC,EAAKG,OACN,0BACGH,EAAKI,QAAQL,KAAI,SAACM,GAAD,OAChB,sBAAIJ,IAAKI,EAAWH,IAClB,gBAAC,IAAD,CACE3C,WAAY8C,EAAWC,OAAOnC,KAC9BX,KAAK,KACLuB,UAAU,iBAEXsB,EAAWC,OAAOnC,eAO/B,0DACA,gBAAC,KAAD,CAAMI,GAAG,KAAT","file":"component---src-pages-teams-tsx-6fa10db23925d21da831.js","sourcesContent":["import { MemberName } from '@/data/member'\nimport { SIZE, SIZE_TYPE } from '@/lib/size'\nimport type { MemberIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype MemberIconProps = {\n  memberName: MemberName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const MemberIcon: React.FC<MemberIconProps> = ({\n  memberName,\n  size,\n  ...props\n}) => {\n  const files = useStaticQuery<MemberIconQuery>(graphql`\n    query MemberIcon {\n      allFile(filter: { relativeDirectory: { eq: \"member-images\" } }) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n  const fixedImage = React.useMemo(() => {\n    const membersOne = files.allFile.nodes.find(\n      (node) => node.name === memberName\n    )\n    if (membersOne) return membersOne\n    const defaultImage = files.allFile.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage\n    throw Error('Default Image not found')\n  }, [memberName, files])\n  const image = React.useMemo(() => {\n    const image = fixedImage[size]\n    if (!image) throw Error(\"Image can't resolved\")\n    return image\n  }, [fixedImage, size])\n\n  return (\n    <Link to={`/members/${memberName}`}>\n      <ImageWrapper\n        {...props}\n        file={image}\n        alt={`${memberName}のアイコン`}\n        width={SIZE[size]}\n        height={SIZE[size]}\n      />\n    </Link>\n  )\n}\n","import { TeamName } from '@/data/team'\nimport { SIZE, SIZE_TYPE } from '@/lib/size'\nimport type { TeamIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype TeamIconProps = {\n  teamName: TeamName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const TeamIcon: React.FC<TeamIconProps> = ({\n  teamName,\n  size,\n  className,\n  ...props\n}) => {\n  const files = useStaticQuery<TeamIconQuery>(graphql`\n    query TeamIcon {\n      svgs: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { in: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          publicURL\n        }\n      }\n      images: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { nin: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n\n  const image = React.useMemo(() => {\n    const svg = files.svgs.nodes.find((node) => node.name === teamName)\n    if (svg) return svg\n    const image = files.images.nodes.find((node) => node.name === teamName)\n    if (image) return image[size]\n    const defaultImage = files.images.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage[size]\n    throw Error('Default Image not found')\n  }, [teamName, files, size])\n\n  const nonNullImage = React.useMemo(() => {\n    if (image) return image\n    throw Error(`image is ${image}`)\n  }, [image])\n\n  return (\n    <Link to={`/teams/${teamName}`} className={className}>\n      <ImageWrapper\n        {...props}\n        file={nonNullImage}\n        alt={`${teamName}のアイコン`}\n        width={SIZE[size]}\n        height={SIZE[size]}\n      />\n    </Link>\n  )\n}\n","export const SIZE = {\n  xxs: 16,\n  xs: 24,\n  sm: 32,\n  md: 48,\n  lg: 64,\n  xl: 128,\n} as const\n\nexport type SIZE_TYPE = keyof typeof SIZE\n","import { MemberIcon } from '@/components/atoms/member-icon'\nimport { TeamIcon } from '@/components/atoms/team-icon'\nimport type { TeamsPageQuery } from '@gql'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\nimport * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport const pageQuery = graphql`\n  query TeamsPage {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allTeam {\n      nodes {\n        id\n        name\n        nameJa\n        members {\n          id\n          member {\n            name\n          }\n          leader\n        }\n      }\n    }\n  }\n`\n\ninterface TeamsPageProps {\n  data: TeamsPageQuery\n}\n\nconst TeamsPage = ({ data }: TeamsPageProps): JSX.Element => {\n  return (\n    <div>\n      <Helmet>\n        <title>{`チーム | ${data.site?.siteMetadata?.title}`}</title>\n      </Helmet>\n      <h1>チーム一覧</h1>\n      <ul>\n        {data.allTeam.nodes.map((team) => (\n          <li key={team.id}>\n            <TeamIcon teamName={team.name} size=\"lg\" />\n            {team.nameJa}\n            <ul>\n              {team.members.map((teamMember) => (\n                <li key={teamMember.id}>\n                  <MemberIcon\n                    memberName={teamMember.member.name}\n                    size=\"sm\"\n                    className=\"rounded-full\"\n                  />\n                  {teamMember.member.name}\n                </li>\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n      <p>Now go build something great.</p>\n      <Link to=\"/\">Go to Top</Link>\n    </div>\n  )\n}\n\nexport default TeamsPage\n"],"sourceRoot":""}