{"version":3,"sources":["webpack:///./src/lib/size.ts","webpack:///./src/components/atoms/social-icons.tsx","webpack:///./src/components/atoms/social-link.tsx","webpack:///./src/templates/member.tsx","webpack:///./src/components/atoms/member-icon.tsx"],"names":["SIZE","xxs","xs","sm","md","lg","xl","TwitterIcon","size","className","src","alt","width","height","GithubIcon","TwitterLink","username","href","target","rel","GithubLink","MemberTemplate","data","member","site","Error","Helmet","nameJa","siteMetadata","title","to","memberName","name","social","twitter","github","MemberIcon","props","files","useStaticQuery","fixedImage","React","membersOne","allFile","nodes","find","node","defaultImage","image","fixed","base64","undefined","srcWebp","srcSetWebp"],"mappings":"qHAAaA,EAAO,CAClBC,IAAK,GACLC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,K,YCEOC,EAAc,SAAC,GAGS,QAFnCC,YAEmC,MAF5B,KAE4B,MADnCC,iBACmC,MADvB,GACuB,EACnC,OACE,uBACEA,UAAS,GAAKA,EACdC,IAAI,2BACJC,IAAI,UACJC,MAAOZ,EAAKQ,GACZK,OAAQb,EAAKQ,MAUNM,EAAa,SAAC,GAGS,QAFlCN,YAEkC,MAF3B,KAE2B,MADlCC,iBACkC,MADtB,GACsB,EAClC,OACE,uBACEA,UAAS,GAAKA,EACdC,IAAI,0BACJC,IAAI,SACJC,MAAOZ,EAAKQ,GACZK,OAAQb,EAAKQ,MChCNO,EAAc,SAAC,GAAgD,IAA9CC,EAA8C,EAA9CA,SAC5B,OACE,qBACEP,UAAU,kBACVQ,KAAI,uBAAyBD,EAC7BE,OAAO,SACPC,IAAI,cAJN,IAKIH,IASKI,EAAa,SAAC,GAA+C,IAA7CJ,EAA6C,EAA7CA,SAC3B,OACE,qBACEP,UAAU,kBACVQ,KAAI,sBAAwBD,EAC5BE,OAAO,SACPC,IAAI,cAJN,IAKIH,I,wBC6EOK,UA1CQ,SAAC,GAEgB,cADtCC,KAAQC,EAC8B,EAD9BA,OAAQC,EACsB,EADtBA,KAEhB,IAAKD,EACH,MAAME,MAAM,oBAEd,OACE,2BACE,gBAACC,EAAA,EAAD,KACE,6BAAWH,EAAOI,OAAlB,cAAqCH,SAArC,UAAqCA,EAAMI,oBAA3C,aAAqC,EAAoBC,SAE3D,2BACE,gBAAC,IAAD,CAAMC,GAAG,YAAT,aAGF,2BACE,gBAAC,IAAD,CACErB,UAAU,eACVsB,WAAYR,EAAOS,KACnBxB,KAAK,QAIT,2BACG,UAAAe,EAAOU,cAAP,SAAeC,QACd,2BACE,gBAAC,EAAD,CAAa1B,KAAK,KAAKC,UAAU,WACjC,gBAAC,EAAD,CAAaO,SAAUO,EAAOU,OAAOC,WAErC,KACH,UAAAX,EAAOU,cAAP,SAAeE,OACd,2BACE,gBAAC,EAAD,CAAY3B,KAAK,KAAKC,UAAU,WAChC,gBAAC,EAAD,CAAYO,SAAUO,EAAOU,OAAOE,UAEpC,MAGN,2BAAMZ,EAAOI,W,stBC1FZ,IAAMS,EAAwC,SAAC,GAIhD,IAHJL,EAGI,EAHJA,WACAvB,EAEI,EAFJA,KACG6B,EACC,qCACEC,EAAQC,YAAc,cAuCtBC,EAAaC,WAAc,WAC/B,IAAMC,EAAaJ,EAAMK,QAAQC,MAAMC,MACrC,SAACC,GAAD,OAAUA,EAAKd,OAASD,KAE1B,GAAIW,EAAY,OAAOA,EACvB,IAAMK,EAAeT,EAAMK,QAAQC,MAAMC,MACvC,SAACC,GAAD,MAAwB,YAAdA,EAAKd,QAEjB,GAAIe,EAAc,OAAOA,EACzB,MAAMtB,MAAM,6BACX,CAACM,EAAYO,IACVU,EAAQP,WAAc,WAAM,MAC1BO,EAAK,UAAGR,EAAWhC,UAAd,aAAG,EAAkByC,MAChC,IAAKD,EAAO,MAAMvB,MAAM,wBACxB,OAAOuB,IACN,CAACR,EAAYhC,IAEhB,OACE,gBAAC,IAAD,CAAMsB,GAAE,YAAcC,GACpB,gBAAC,IAAD,iBACMM,EADN,CAEEY,MAAK,OACAD,GADA,IAEHE,OAAQF,EAAME,aAAUC,EACxBC,QAASJ,EAAMK,iBAAcF,EAC7BE,WAAYL,EAAMK,iBAAcF","file":"component---src-templates-member-tsx-fe4e50fb234ecb518b11.js","sourcesContent":["export const SIZE = {\n  xxs: 16,\n  xs: 24,\n  sm: 32,\n  md: 48,\n  lg: 64,\n  xl: 128,\n} as const\n\nexport type SIZE_TYPE = keyof typeof SIZE\n","import { SIZE, SIZE_TYPE } from '@/lib/size'\nimport * as React from 'react'\n\ntype TwitterIconProps = {\n  size?: SIZE_TYPE\n  className?: string\n}\n\nexport const TwitterIcon = ({\n  size = 'md',\n  className = '',\n}: TwitterIconProps): JSX.Element => {\n  return (\n    <img\n      className={`${className}`}\n      src=\"/social-icon/twitter.svg\"\n      alt=\"twitter\"\n      width={SIZE[size]}\n      height={SIZE[size]}\n    />\n  )\n}\n\ntype GithubIconProps = {\n  size?: SIZE_TYPE\n  className?: string\n}\n\nexport const GithubIcon = ({\n  size = 'md',\n  className = '',\n}: GithubIconProps): JSX.Element => {\n  return (\n    <img\n      className={`${className}`}\n      src=\"/social-icon/github.svg\"\n      alt=\"github\"\n      width={SIZE[size]}\n      height={SIZE[size]}\n    />\n  )\n}\n","import * as React from 'react'\n\ntype TwitterLinkProps = {\n  username: string\n}\n\nexport const TwitterLink = ({ username }: TwitterLinkProps): JSX.Element => {\n  return (\n    <a\n      className=\"hover:underline\"\n      href={`https://twitter.com/${username}`}\n      target=\"_blank\"\n      rel=\"noreferrer\">\n      @{username}\n    </a>\n  )\n}\n\ntype GithubLinkProps = {\n  username: string\n}\n\nexport const GithubLink = ({ username }: GithubLinkProps): JSX.Element => {\n  return (\n    <a\n      className=\"hover:underline\"\n      href={`https://github.com/${username}`}\n      target=\"_blank\"\n      rel=\"noreferrer\">\n      @{username}\n    </a>\n  )\n}\n","import { MemberIcon } from '@/components/atoms/member-icon'\nimport { GithubIcon, TwitterIcon } from '@/components/atoms/social-icons'\nimport { GithubLink, TwitterLink } from '@/components/atoms/social-link'\nimport { MemberName } from '@/data/member'\nimport type { MemberTemplateQuery } from '@gql'\nimport { graphql, Link } from 'gatsby'\nimport * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport const query = graphql`\n  query MemberTemplate($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    member(id: { eq: $slug }) {\n      belongs {\n        grade\n        faculty {\n          name\n          nameJa\n        }\n      }\n      contributions {\n        portfolio {\n          id\n          name\n          nameJa\n        }\n      }\n      isGraduated\n      joinedAt\n      name\n      nameJa\n      position\n      skills {\n        level\n        skill {\n          id\n          description\n          name\n        }\n      }\n      social {\n        github\n        twitter\n      }\n      teams {\n        leader\n        id\n        team {\n          name\n          nameJa\n        }\n      }\n    }\n  }\n`\n\ntype MemberTemplateProps = {\n  data: MemberTemplateQuery\n}\n\nconst MemberTemplate = ({\n  data: { member, site },\n}: MemberTemplateProps): JSX.Element => {\n  if (!member) {\n    throw Error('Member not found')\n  }\n  return (\n    <div>\n      <Helmet>\n        <title>{`${member.nameJa} | メンバー | ${site?.siteMetadata?.title}`}</title>\n      </Helmet>\n      <div>\n        <Link to=\"/members\">▷ メンバー一覧</Link>\n      </div>\n\n      <div>\n        <MemberIcon\n          className=\"rounded-full\"\n          memberName={member.name as MemberName}\n          size=\"xl\"\n        />\n      </div>\n\n      <div>\n        {member.social?.twitter ? (\n          <div>\n            <TwitterIcon size=\"xs\" className=\"inline\" />\n            <TwitterLink username={member.social.twitter} />\n          </div>\n        ) : null}\n        {member.social?.github ? (\n          <div>\n            <GithubIcon size=\"xs\" className=\"inline\" />\n            <GithubLink username={member.social.github} />\n          </div>\n        ) : null}\n      </div>\n\n      <div>{member.nameJa}</div>\n    </div>\n  )\n}\nexport default MemberTemplate\n","import { MemberName } from '@/data/member'\nimport { SIZE_TYPE } from '@/lib/size'\nimport type { MemberIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport Img, { GatsbyImageProps } from 'gatsby-image'\nimport * as React from 'react'\n\ntype MemberIconProps = Pick<GatsbyImageProps, 'className'> & {\n  memberName: MemberName\n  size: SIZE_TYPE\n}\n\nexport const MemberIcon: React.FC<MemberIconProps> = ({\n  memberName,\n  size,\n  ...props\n}) => {\n  const files = useStaticQuery<MemberIconQuery>(graphql`\n    query MemberIcon {\n      allFile(filter: { relativeDirectory: { eq: \"member-images\" } }) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            fixed(width: 16, height: 16) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n          xs: childImageSharp {\n            fixed(width: 24, height: 24) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n          sm: childImageSharp {\n            fixed(width: 32, height: 32) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n          md: childImageSharp {\n            fixed(width: 48, height: 48) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n          lg: childImageSharp {\n            fixed(width: 64, height: 64) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n          xl: childImageSharp {\n            fixed(width: 128, height: 128) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n        }\n      }\n    }\n  `)\n  const fixedImage = React.useMemo(() => {\n    const membersOne = files.allFile.nodes.find(\n      (node) => node.name === memberName\n    )\n    if (membersOne) return membersOne\n    const defaultImage = files.allFile.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage\n    throw Error('Default Image not found')\n  }, [memberName, files])\n  const image = React.useMemo(() => {\n    const image = fixedImage[size]?.fixed\n    if (!image) throw Error(\"Image can't resolved\")\n    return image\n  }, [fixedImage, size])\n\n  return (\n    <Link to={`/members/${memberName}`}>\n      <Img\n        {...props}\n        fixed={{\n          ...image,\n          base64: image.base64 || undefined,\n          srcWebp: image.srcSetWebp || undefined,\n          srcSetWebp: image.srcSetWebp || undefined,\n        }}\n      />\n    </Link>\n  )\n}\n"],"sourceRoot":""}